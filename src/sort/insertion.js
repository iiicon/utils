// 时间复杂度
// 时间复杂度是指执行算法所需要的计算工作量，它考察当输入值大小趋近无穷时的情况，一般情况下，算法中基本操作重复执行的次数是问题规模 n 的某个函数。

// 最好情况：数组升序排列，时间复杂度为：O(n)

// 最坏情况：数组降序排列，时间复杂度为：O(n²)

// 稳定性
// 稳定性，是指相同的元素在排序后是否还保持相对的位置。

// 要注意的是对于不稳定的排序算法，只要举出一个实例，即可说明它的不稳定性；而对于稳定的排序算法，必须对算法进行分析从而得到稳定的特性。

// 比如 [3, 3, 1]，排序后，还是 [3, 3, 1]，但是其实是第二个 3 在 第一个 3 前，那这就是不稳定的排序算法。

// 插入排序是稳定的算法。

// 优势
// 当数组是快要排序好的状态或者问题规模比较小的时候，插入排序效率更高。这也是为什么 v8 会在数组长度小于等于 10 的时候采用插入排序。

function insertion(arr) {
  for (let i = 1; i < arr.length; i++) {
    let n = arr[i]; // 记住n
    let j; // j要在for循环之后使用
    for (j = i - 1; j >= 0; j--) {
      if (arr[j] > n) {
        //比 n 大的数字往后挪了一位
        arr[j + 1] = arr[j];
      } else {
        break;
      }
    }
    arr[j + 1] = n;
  }
  return arr;
}
